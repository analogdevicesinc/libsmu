trigger:
  branches:
    include:
    - main
    - master
    - staging/*
    - v*.*.*
    - ci-*
  tags:
    include:
    - v*

pr:
  branches:
    include:
    - main
    - master

parameters:
  - name: pythonVersions
    type: object
    default:
    - '3.10'
    - 3.9
    - 3.8
    - 3.7

stages:
- stage: Builds
  jobs:
  - job: WindowsBuilds
    strategy:
      matrix:
        VS2019_Win32:
          imageName: 'windows-2019'
          COMPILER: 'Visual Studio 16 2019'
          ARCH: 'Win32'
          artifactName: 'Windows-VS-16-2019-Win32'
          pyArch: 'x86'
        VS2019_Win64:
          imageName: 'windows-2019'
          COMPILER: 'Visual Studio 16 2019'
          ARCH: 'x64'
          artifactName: 'Windows-VS-16-2019-x64'
          pyArch: 'x64'
    pool:
      vmImage: $[ variables['imageName'] ]
    steps:
    - checkout: self
      fetchDepth: 1
      clean: true
    - task: UsePythonVersion@0
      displayName: Use Python 3.10
      inputs:
        versionSpec: '3.10'
        architecture: $(pyArch)
    - task: PowerShell@2
      inputs:
        targetType: 'filePath'
        filePath: .\CI\install_deps_win.ps1
      displayName: Dependencies
    - task: PowerShell@2
      inputs:
        targetType: 'filePath'
        filePath: .\CI\build_win.ps1
      displayName: Build
    - task: CopyFiles@2
      displayName: 'Copy libraries'
      inputs:
        sourceFolder: '$(Agent.BuildDirectory)/s/build/src'
        contents: 'libsmu.*'
        targetFolder: '$(Build.ArtifactStagingDirectory)'
    - task: CopyFiles@2
      displayName: 'Copy smu.exe'
      inputs:
        sourceFolder: '$(Agent.BuildDirectory)/s/build/src/cli/Debug'
        contents: 'smu.exe'
        targetFolder: '$(Build.ArtifactStagingDirectory)'
    - task: CopyFiles@2
      displayName: 'Copy examples'
      inputs:
        sourceFolder: '$(Agent.BuildDirectory)/s/build/examples/Debug'
        contents: '*.exe'
        targetFolder: '$(Build.ArtifactStagingDirectory)'
    - task: CopyFiles@2
      displayName: 'Copy tests'
      inputs:
        sourceFolder: '$(Agent.BuildDirectory)/s/build/tests/Debug'
        contents: '*.exe'
        targetFolder: '$(Build.ArtifactStagingDirectory)'
    - task: CopyFiles@2
      displayName: 'Copy tests script'
      inputs:
        sourceFolder: '$(Agent.BuildDirectory)/s/tests'
        contents: 'run-tests.bat'
        targetFolder: '$(Build.ArtifactStagingDirectory)'
    - task: PowerShell@2
      displayName: 'Copy dependencies'
      inputs:
        targetType: 'filePath'
        filePath: .\CI\publish_deps.ps1
    - ${{ each pyVersion in parameters.pythonVersions }}:
      - task: UsePythonVersion@0
        displayName: Use Python ${{ pyVersion }}
        inputs:
          versionSpec: ${{ pyVersion }}
          architecture: $(pyArch)
      - script: |
              python3 --version
              python3 -m pip install --upgrade pip
              python3 -m pip install wheel twine build virtualenv cython six
              cd $(Agent.BuildDirectory)\s\build
              python3 -m build
        displayName: Wheel Python ${{ pyVersion }}
    - task: CopyFiles@2
      inputs:
        sourceFolder: '$(Agent.BuildDirectory)/s/build/dist/'
        contents: '$(Agent.BuildDirectory)/s/build/dist/?(*.whl)'
        targetFolder: '$(Build.ArtifactStagingDirectory)'
    - task: PublishPipelineArtifact@1
      condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))
      inputs:
        targetPath: '$(Build.ArtifactStagingDirectory)'
        artifactName: '$(artifactName)'
    - script: |
        python -m pip install --upgrade pip twine
        python -m twine upload --repository "testpypi" '$(Agent.BuildDirectory)/s/build/dist/*.whl'
      condition: and(succeeded(), startsWith(variables['Build.SourceBranch'], 'refs/tags/v'))
      displayName: "Upload to PyPI"
      env:
        TWINE_USERNAME: '__token__'
        TWINE_PASSWORD: $(TWINE_PASSWORD)
- stage: PushArtifacts
  dependsOn: Builds
  jobs:
  - job: GenerateSetupExe
    condition: and(succeeded(), or(eq(variables['Build.SourceBranch'], 'refs/heads/master'), startsWith(variables['Build.SourceBranch'], 'refs/tags/v')))
    pool:
      vmImage: 'windows-2019'
    steps:
      - task: DownloadPipelineArtifact@2
        inputs:
          path: '$(Build.ArtifactStagingDirectory)\Windows-VS-16-2019-Win32'
          artifact: 'Windows-VS-16-2019-Win32'
      - task: DownloadPipelineArtifact@2
        inputs:
          path: '$(Build.ArtifactStagingDirectory)\Windows-VS-16-2019-x64'
          artifact: 'Windows-VS-16-2019-x64'
      - task: PowerShell@2
        inputs:
          targetType: 'filePath'
          filePath: .\CI\generate_exe.ps1
        displayName: "Generate libsmu setup for 32bit and 64bit"
      - task: PublishPipelineArtifact@1
        inputs:
          targetPath: '$(Build.ArtifactStagingDirectory)'
          artifactName: 'Windows-VS-16-2019-setup'
