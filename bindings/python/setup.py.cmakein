#!/usr/bin/env python

import copy
from io import open
import glob
import os
import re
import shlex
import shutil
import subprocess
import sys

from setuptools.command.build_py import build_py
from setuptools.command.build_ext import build_ext as dst_build_ext
from setuptools.command.sdist import sdist as dst_sdist
from setuptools import setup, find_packages, Extension, Command

# top level bindings directory
BINDINGS_DIR = '${CMAKE_CURRENT_SOURCE_DIR}'
# top level repo directory
TOPDIR = os.path.dirname(os.path.dirname(BINDINGS_DIR))


def pkgconfig(*packages, **kw):
    """Translate pkg-config data to compatible Extension parameters."""
    flag_map = {'-I': 'include_dirs', '-L': 'library_dirs', '-l': 'libraries'}

    try:
        tokens = subprocess.check_output(
            ['pkg-config', '--libs', '--cflags'] + list(packages)).split()
    except OSError as e:
        sys.stderr.write('running pkg-config failed: {}\n'.format(e.strerror))
        sys.exit(1)

    for token in tokens:
        token = token.decode()
        if token[:2] in flag_map:
            kw.setdefault(flag_map.get(token[:2]), []).append(token[2:])
        else:
            kw.setdefault('extra_compile_args', []).append(token)
    return kw


# configure various required compile flags
ext_kwargs = {'include_dirs': [os.path.join(TOPDIR, 'include'), '${LIBUSB_INCLUDE_DIRS}']}
if os.path.exists(os.path.join('${CMAKE_BINARY_DIR}', 'src')):
    # link against locally built library if build dir exists
    ext_kwargs['library_dirs'] = [os.path.join('${CMAKE_BINARY_DIR}', 'src')]

if sys.platform == 'win32':
    ext_kwargs['libraries'] = ['libsmu']
elif sys.platform == "linux":
    ext_kwargs['libraries'] = ['smu']
    ext_kwargs = pkgconfig('libusb-1.0', **ext_kwargs)
elif sys.platform == "darwin":
    ext_kwargs['libraries'] = []
    ext_kwargs = pkgconfig('libusb-1.0', **ext_kwargs)

ext_kwargs['extra_compile_args']=[${EXTRA_COMPILE_FLAGS}]
ext_kwargs['extra_link_args']=[${EXTRA_LINK_FLAGS}]

# cython extensions to generate/build
extensions = []
extensions.extend([
    Extension(
        'pysmu.libsmu',
        [os.path.join(BINDINGS_DIR, 'pysmu', 'libsmu.pyx')], **ext_kwargs),
    ])

# Embed function signature information into built cython modules for sphinx doc generation.
for e in extensions:
    e.cython_directives = {"embedsignature": True}

class sdist(dst_sdist):
    """Make sure generated cython extensions are included."""

    def run(self):
        from Cython.Build import cythonize
        build_ext = self.reinitialize_command('build_ext')
        build_ext.ensure_finalized()
        cythonize(build_ext.extensions,
                    compiler_directives={'language_level' : "3"})
        dst_sdist.run(self)

class build_ext(dst_build_ext):
    """Add custom compile flags for compiled extensions."""

    @staticmethod
    def determine_ext_lang(ext_path):
        """Determine file extensions for generated cython extensions."""
        with open(ext_path) as f:
            for line in f:
                line = line.lstrip()
                if not line:
                    continue
                elif line[0] != '#':
                    return None
                line = line[1:].lstrip()
                if line[:10] == 'distutils:':
                    key, _, value = [s.strip() for s in line[10:].partition('=')]
                    if key == 'language':
                        return value
            else:
                return None

    def no_cythonize(self, **_ignore):
        """Determine file paths for generated cython extensions."""
        extensions = copy.deepcopy(self.extensions)
        for extension in extensions:
            sources = []
            for sfile in extension.sources:
                path, ext = os.path.splitext(sfile)
                if ext in ('.pyx', '.py'):
                    lang = build_ext.determine_ext_lang(sfile)
                    if lang == 'c++':
                        ext = '.cpp'
                    else:
                        ext = '.c'
                    sfile = path + ext
                sources.append(sfile)
            extension.sources[:] = sources
        return extensions

    def build_extensions(self):
        compiler = self.compiler.compiler_type
        cxxflags = []
        if compiler != 'msvc':
            cxxflags.append('-std=c++11')
        for ext in self.extensions:
            ext.extra_compile_args.extend(cxxflags)
        return dst_build_ext.build_extensions(self)

    def run(self):
        from Cython.Build import cythonize
        cythonize(self.extensions,
                    compiler_directives={'language_level' : "3"})

        self.extensions = self.no_cythonize()
        return dst_build_ext.run(self)

version = ''
PY_INIT_FILE = os.path.join(BINDINGS_DIR, 'pysmu', '__init__.py')
if (os.path.isfile(PY_INIT_FILE)):
    with open(PY_INIT_FILE, 'r') as fd:
        reg = re.compile(r'__version__\s*=\s*[\'"]([^\'"]*)[\'"]')
        for line in fd:
            m = reg.match(line)
            if m:
                version = m.group(1)
                break

    with open(PY_INIT_FILE, 'r+') as fd:
        contents = fd.readlines()
        pattern = "from .libsmu import"
        import_pattern = "import os"

        import_command = u"import os\n\n" + \
        u"#Import DLLs for Python versions >= 3.8\n" + \
        u"for path in os.environ.get(\"PATH\", \"\").split(os.pathsep):\n" + \
        u"\tif path and os.path.isabs(path):\n" + \
        u"\t\ttry:\n" + \
        u"\t\t\tos.add_dll_directory(path)\n" + \
        u"\t\texcept (OSError, AttributeError):\n" + \
        u"\t\t\tcontinue\n\n"

        for index, line in enumerate(contents):
            #the script is run multiple times; this line prevents inserting the import command multuple times
            if import_pattern in line:
                break
            if pattern in line:
                contents.insert(index, import_command)
                break

        fd.seek(0)
        fd.writelines(contents)

if not version:
    raise RuntimeError('Cannot find version information')


test_requirements = ['pytest']
if sys.hexversion < 0x03030000:
    test_requirements.append('mock')

setup(
    name='pysmu',
    version=version,
    description='python library and utility for the ADALM1000 device',
    url='https://github.com/analogdevicesinc/libsmu',
    license='BSD',
    maintainer='Analog Devices, Inc.',
    maintainer_email='alexandra.trifan@analog.com',
    packages=find_packages(),
    ext_modules=extensions,
    scripts=glob.glob('${CMAKE_CURRENT_SOURCE_DIR}/bin/*'),
    tests_require=test_requirements,
    cmdclass={
      'build_py': build_py,
      'build_ext': build_ext,
      'sdist': sdist
    },
    classifiers=[
        'Intended Audience :: Developers',
        'License :: OSI Approved :: BSD License',
        'Programming Language :: Python :: 3.7',
        'Programming Language :: Python :: 3.8',
        'Programming Language :: Python :: 3.9',
        'Programming Language :: Python :: 3.10',
    ],
)
