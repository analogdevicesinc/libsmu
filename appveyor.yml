image:
  - Visual Studio 2019

version: '{branch}.{build}'
clone_depth: 1

init:
    - ps: iex ((new-object net.webclient).DownloadString('https://raw.githubusercontent.com/appveyor/ci/master/scripts/enable-rdp.ps1'))

environment:
    MSYSTEM: MINGW64
    # Tell msys2 to inherit the current directory when starting the shell
    CHERE_INVOKING: 1

configuration:
  - Release
  - Debug

branches:
  except:
    - gh-pages
    - coverity_scan

matrix:
  fast_finish: true

install:
    - echo "Downloading deps..."
    - cd c:\
    - appveyor DownloadFile http://swdownloads.analog.com/cse/build/libiio-win-deps-libusb1.0.24.zip
    - 7z x -y "c:\libiio-win-deps-libusb1.0.24.zip"

  # install innosetup for creating installers
    - choco install InnoSetup
    - set PATH=%PATH%;C:\Program Files (x86)\Inno Setup 5

    # Download dpinst for Driver installing from swdownloads
    - appveyor DownloadFile http://swdownloads.analog.com/cse/m1k/drivers/dpinst.zip -FileName C:\dpinst.zip
    - 7z x -y "c:\dpinst.zip" -o"c:\dpinst" > nul

build_script:
    # build 32-bit version of libsmu
    - mkdir c:\projects\libsmu\32
    - cd c:\projects\libsmu\32
    - cmake -G "Visual Studio 16 2019" \
      -A Win32 \
      -DCMAKE_BUILD_TYPE:STRING=%CONFIGURATION% \
      -DCMAKE_SYSTEM_PREFIX_PATH="C:" \
      -DLIBUSB_INCLUDE_DIRS="C:\include\libusb-1.0" \
      -DLIBUSB_LIBRARIES="C:\\libs\\32\\libusb-1.0.lib" \
      -DBOOST_ROOT="C:\\Libraries\\boost_1_73_0" \
      -DBOOST_LIBRARYDIR="C:\\Libraries\\boost_1_73_0\\lib32-msvc-14.2" \
      -DBoost_USE_STATIC_LIBS=ON \
      -DBUILD_STATIC_LIB=ON \
      -DBUILD_EXAMPLES=ON \
      -DBUILD_TESTS=ON \
      -DBUILD_PYTHON=OFF \
      ..
    - cmake --build . --config %CONFIGURATION%

    # set LIBSMU_VERSION to current project version determined by cmake
    - ps: Set-AppveyorBuildVariable -Name LIBSMU_VERSION -Value (get-content .version)

    # build 64-bit version of libsmu
    - mkdir c:\projects\libsmu\64
    - cd c:\projects\libsmu\64
    - cmake -G "Visual Studio 16 2019" \
      -A x64 \
      -DCMAKE_BUILD_TYPE:STRING=%CONFIGURATION% \
      -DCMAKE_SYSTEM_PREFIX_PATH="C:" \
      -DLIBUSB_INCLUDE_DIRS="C:\include\libusb-1.0" \
      -DLIBUSB_LIBRARIES="C:\\libs\\64\\libusb-1.0.lib" \
      -DBOOST_ROOT="C:\\Libraries\\boost_1_73_0" \
      -DBOOST_LIBRARYDIR="C:\\Libraries\\boost_1_73_0\\lib64-msvc-14.2" \
      -DBoost_USE_STATIC_LIBS=ON \
      -DBUILD_STATIC_LIB=ON \
      -DBUILD_EXAMPLES=ON \
      -DBUILD_TESTS=ON \
      -DBUILD_PYTHON=OFF \
      ..
    - cmake --build . --config %CONFIGURATION%

    ### create libsmu zipfile
    - mkdir c:\libsmu
    - mkdir c:\libsmu\drivers
    - mkdir c:\libsmu\32
    - mkdir c:\libsmu\64
    - mkdir c:\libsmu\src
    - mkdir c:\libsmu\include
    - mkdir c:\libsmu\include\libsmu
    # bundle a copy of the sources for debugging/traceback purposes
    - xcopy c:\projects\libsmu\src c:\libsmu\src /E /H /K
    # headers
    - copy ..\include\libsmu\*.hpp c:\libsmu\include\libsmu
    - copy "C:\include\libusb-1.0\libusb.h" c:\libsmu\include\libsmu
    # drivers
    - copy ..\dist\m1k-winusb.inf c:\libsmu\drivers
    - copy ..\dist\m1k-winusb.cat c:\libsmu\drivers
    - if not exist "c:\libsmu\drivers\amd64" mkdir c:\libsmu\drivers\amd64
    - copy ..\dist\amd64\* c:\libsmu\drivers\amd64
    - if not exist "c:\libsmu\drivers\x86" mkdir c:\libsmu\drivers\x86
    - copy ..\dist\x86\* c:\libsmu\drivers\x86
    - copy C:\dpinst\dpinst.exe c:\libsmu\drivers
    - copy C:\dpinst\dpinst_amd64.exe c:\libsmu\drivers

    # libraries
    - copy C:\libs\32\libusb-1.0.* c:\libsmu\32
    - copy C:\libs\64\libusb-1.0.* c:\libsmu\64
    - copy ..\32\src\%CONFIGURATION%\libsmu.* c:\libsmu\32
    - copy ..\64\src\%CONFIGURATION%\libsmu.* c:\libsmu\64
    # gtest libraries for test executables
    - ps: |
        if (Test-Path "..\32\googletest-build\googlemock\gtest\Release\gtest.*") { copy ..\32\googletest-build\googlemock\gtest\Release\gtest.* c:\libsmu\32 }
        if (Test-Path "..\64\googletest-build\googlemock\gtest\Release\gtest.*") { copy ..\64\googletest-build\googlemock\gtest\Release\gtest.* c:\libsmu\64 }
        if (Test-Path "..\32\googletest-build\googlemock\gtest\Debug\gtestd.*") { copy ..\32\googletest-build\googlemock\gtest\Debug\gtestd.* c:\libsmu\32 }
        if (Test-Path "..\64\googletest-build\googlemock\gtest\Debug\gtestd.*") { copy ..\64\googletest-build\googlemock\gtest\Debug\gtestd.* c:\libsmu\64 }
    
    # executables including examples and tests
    - copy ..\32\src\cli\%CONFIGURATION%\smu.exe c:\libsmu\32
    - copy ..\64\src\cli\%CONFIGURATION%\smu.exe c:\libsmu\64
    - copy ..\32\examples\%CONFIGURATION%\*.exe c:\libsmu\32
    - copy ..\64\examples\%CONFIGURATION%\*.exe c:\libsmu\64
    - copy ..\32\tests\%CONFIGURATION%\*.exe c:\libsmu\32
    - copy ..\64\tests\%CONFIGURATION%\*.exe c:\libsmu\64
    # batch file to run test suite
    - copy ..\tests\run-tests.bat c:\libsmu\32
    - copy ..\tests\run-tests.bat c:\libsmu\64
    # windows specific redistributable libraries
    - copy "C:\Program Files (x86)\Microsoft Visual Studio\2019\\Community\VC\Redist\MSVC\14.29.30133\x86\Microsoft.VC142.CRT\msvcp140.dll" c:\libsmu\32
    - copy "C:\Program Files (x86)\Microsoft Visual Studio\2019\\Community\VC\Redist\MSVC\14.29.30133\x86\Microsoft.VC142.CRT\vcruntime140.dll" c:\libsmu\32
    - copy "C:\Program Files (x86)\Microsoft Visual Studio\2019\\Community\VC\Redist\MSVC\14.29.30133\x64\Microsoft.VC142.CRT\msvcp140.dll" c:\libsmu\64
    - copy "C:\Program Files (x86)\Microsoft Visual Studio\2019\\Community\VC\Redist\MSVC\14.29.30133\x64\Microsoft.VC142.CRT\vcruntime140.dll" c:\libsmu\64
    - copy "C:\Program Files (x86)\Windows Kits\10\Redist\ucrt\DLLs\x86\*" c:\libsmu\32
    - copy "C:\Program Files (x86)\Windows Kits\10\Redist\ucrt\DLLs\x64\*" c:\libsmu\64

    - 7z a "c:\libsmu-%LIBSMU_VERSION%.zip" c:\libsmu
    - appveyor PushArtifact c:\libsmu-%LIBSMU_VERSION%.zip

    # add python dirs to PATH
    - set PATH=C:\Python38-x64;C:\Python38-x64\Scripts;%PATH%
    - cd c:\projects\libsmu\bindings\python
    - python --version
    - python -m pip install --upgrade pip
    - python -m pip install twine setuptools build virtualenv wheel cython
    - python -m build

    # build 32 and 64 bit pysmu modules for all supported python versions
    # TODO: drop the duplication and loop over supported python versions
    # push all dist files as artifacts
    - ps: Get-ChildItem dist/.\* | % { Push-AppveyorArtifact $_.FullName -FileName $_.Name }

    # create libsmu installers
    - copy C:\projects\libsmu\32\dist\libsmu-x86.iss C:\projects\libsmu\dist\libsmu-x86.iss
    - copy C:\projects\libsmu\32\dist\libsmu-x64.iss C:\projects\libsmu\dist\libsmu-x64.iss
    - iscc C:\projects\libsmu\dist\libsmu-x86.iss
    - iscc C:\projects\libsmu\dist\libsmu-x64.iss
    - ren C:\libsmu-setup-x86.exe libsmu-%LIBSMU_VERSION%-setup-x86.exe
    - ren C:\libsmu-setup-x64.exe libsmu-%LIBSMU_VERSION%-setup-x64.exe
    - appveyor PushArtifact C:\libsmu-%LIBSMU_VERSION%-setup-x86.exe
    - appveyor PushArtifact C:\libsmu-%LIBSMU_VERSION%-setup-x64.exe

cache:
  # cache innosetup download
    - C:\Users\appveyor\AppData\Local\Temp\chocolatey

on_finish:
    - ps: $blockRdp = $true; iex ((new-object net.webclient).DownloadString('https://raw.githubusercontent.com/appveyor/ci/master/scripts/enable-rdp.ps1'))
