env:
  global:
    - secure: UP0F0/tspgDnPsxZ4uCdRUcfhBrmHKtdWZ7fhGuTq4rHBeC9CxwqVB//JKEr0XTqzDHhQ2J53S7j7XY90h9P+9kQoTmkuOxLs1FNYXg011/rVkwEwu0427M+Oye2CbENWgaf4OycPgkbZR2USKwKg53oGniAyyz6/xm8IlAZRng=

matrix:
  fast_finish: true
  include:
    - os: linux
      sudo: required
      dist: bionic
      language: python
      python: 3.6
      env: PYTHON=python PIP=pip
      cache: pip
    - os: linux
      sudo: required
      dist: xenial
      language: python
      python: 3.5
      env: PYTHON=python PIP=pip
      cache: pip
    - os: linux
      sudo: required
      dist: focal
      language: python
      python: 3.8
      env: PYTHON=python PIP=pip
      cache: pip
    - os: osx
      osx_image: xcode10.1
      env: PYTHON=python3 PIP=pip3
      cache: "$HOME/Library/Caches/pip"
    - os: osx
      osx_image: xcode11
      env: PYTHON=python3 PIP=pip3
      cache: "$HOME/Library/Caches/pip"
    - os: osx
      osx_image: xcode12
      env: PYTHON=python3 PIP=pip3
      cache: "$HOME/Library/Caches/pip"

addons:
  apt:
    packages:
      - libusb-1.0-0-dev
      - libboost-all-dev
  coverity_scan:
    project:
      name: analogdevicesinc/libsmu
      description: Software abstractions for the analog signal exploration tools (ADALM1000)
    notification_email: alexandra.trifan@analog.com
    build_command_prepend: mkdir -p build && cd build && cmake -DBUILD_PYTHON=OFF ..
    build_command: make
    branch_pattern: coverity_scan

# build from all branches except appveyor (windows builds)
branches:
  except:
    - appveyor
before_install:
  - if [[ ${TRAVIS_OS_NAME} == osx ]]; then brew update; fi
  - if [[ ${TRAVIS_OS_NAME} == linux ]]; then sudo apt-get update ; fi

install:
  - if [[ ${TRAVIS_OS_NAME} == osx ]]; then brew install libusb; fi
  - if [[ ${TRAVIS_OS_NAME} == osx ]]; then brew install ${PYTHON} || true; fi
  - if [[ ${TRAVIS_OS_NAME} == osx ]]; then brew upgrade cmake || true; fi

  # for python bindings
  - if [[ ${TRAVIS_OS_NAME} == osx ]]; then sudo easy_install pip; fi
  - ${PIP} install --only-binary ":all:" --disable-pip-version-check --upgrade pip
  - if [[ ${TRAVIS_OS_NAME} == osx ]]; then sudo ${PIP} install --only-binary ":all:" wheel cython ; fi
  - if [[ ${TRAVIS_OS_NAME} == linux ]]; then ${PYTHON} -m pip install --upgrade pip stdeb stdeb3 setuptools cython ; fi
  - if [[ ${TRAVIS_OS_NAME} == linux ]]; then ${PYTHON} -m pip install setuptools wheel stdeb ; fi
  - if [[ ${TRAVIS_OS_NAME} == linux ]]; then sudo apt-get install devscripts cython3 python3-setuptools python3-stdeb fakeroot dh-python python3-all debhelper python3-dev python3-all-dev python3-wheel ; fi

script:
  # build tar containg python files
  - if [[ ${TRAVIS_OS_NAME} == linux ]]; then mkdir -p build_tar && cd build_tar; fi
  - if [[ ${TRAVIS_OS_NAME} == linux ]]; then cmake -DDEB_DETECT_DEPENDENCIES=ON -DENABLE_PACKAGING=ON -DUSE_PYTHON2=OFF -DBUILD_PYTHON=ON ..; make package; rm *.deb; cd .. ; fi

  - mkdir -p build && cd build
  - if [[ ${TRAVIS_OS_NAME} == linux ]]; then cmake -DDEB_DETECT_DEPENDENCIES=ON -DENABLE_PACKAGING=ON -DUSE_PYTHON2=OFF -DBUILD_PYTHON=OFF ..; make package; rm *.tar.gz; fi

  # Build tar.gz for OSX (contains libraries and smu)
  - if [[ ${TRAVIS_OS_NAME} == osx ]]; then cmake -DENABLE_PACKAGING=ON -DBUILD_PYTHON=OFF ..; make package; fi

  # Build pkg for OSX (contains libsmu.framework - only base library)
  - if [[ ${TRAVIS_OS_NAME} == osx ]]; then cmake -DOSX_PACKAGE=ON -DENABLE_PACKAGING=OFF -DUSE_PYTHON2=OFF .. ; fi
  - make
  - sudo make install
  - ls

  - cd "${TRAVIS_BUILD_DIR}"/bindings/python
  - "${PYTHON} --version"
  - ${PYTHON} -c "import struct; print(struct.calcsize('P') * 8)"
  - ${PYTHON} setup.py build_ext -L "${TRAVIS_BUILD_DIR}"/build/src
  - "${PYTHON} setup.py build"
  - if [[ ${TRAVIS_OS_NAME} == linux ]]; then ${PYTHON} -c "from Cython.Build import cythonize" ; fi
  - "${PYTHON} setup.py bdist_wheel --skip-build"
  - if [[ ${TRAVIS_OS_NAME} == linux ]]; then sudo sed -i 's/my\ \$ignore_missing_info\ =\ 0;/my\ \$ignore_missing_info\ =\ 1;/' /usr/bin/dpkg-shlibdeps ; fi
  - if [[ ${TRAVIS_OS_NAME} == linux ]]; then ${PYTHON} setup.py --command-packages=stdeb.command sdist_dsc ; fi
  - if [[ ${TRAVIS_OS_NAME} == linux ]]; then cd "$(find . -type d -name "debian" | head -n 1)"/.. ; fi
  - if [[ ${TRAVIS_OS_NAME} == linux ]]; then debuild -us -uc ; fi
  - if [[ ${TRAVIS_OS_NAME} == linux ]]; then cp ${TRAVIS_BUILD_DIR}/bindings/python/deb_dist/*.deb ${TRAVIS_BUILD_DIR}/bindings/python ; fi


before_deploy:
  - ". ${TRAVIS_BUILD_DIR}/CI/travis/before_deploy"


deploy:
  - provider: releases
    api_key:
      secure: LW6KL6nixaLLEkZKE/knz9qGtbUmJU3G3F1Rexo8xMEQyUOePS99OTNANjI38zlOWP3Cbcrrl2Palz7B9ZXkFYnT9NjRNB15ox1LOEeZTGKT65+N11Te8WpHHcQVXFc5e3BupmYdwv7vMh+a4RTbq/nRF0X/OzbV/Nyxlzlw6fA=
    file:
      - "${RELEASE_PKG_FILE_DEB}"
      - "${RELEASE_PKG_FILE_TGZ}"
      - "${RELEASE_PY_FILE_DEB}"
    skip_cleanup: true
    on:
      repo: analogdevicesinc/libsmu
      tags: true
      condition: "($TRAVIS_OS_NAME = linux)"
  - provider: releases
    api_key:
      secure: LW6KL6nixaLLEkZKE/knz9qGtbUmJU3G3F1Rexo8xMEQyUOePS99OTNANjI38zlOWP3Cbcrrl2Palz7B9ZXkFYnT9NjRNB15ox1LOEeZTGKT65+N11Te8WpHHcQVXFc5e3BupmYdwv7vMh+a4RTbq/nRF0X/OzbV/Nyxlzlw6fA=
    file:
      - "${RELEASE_PKG_FILE_PKG}"
      - "${RELEASE_PKG_FILE_TGZ}"
    skip_cleanup: true
    on:
      repo: analogdevicesinc/libsmu
      tags: true
      condition: "$TRAVIS_OS_NAME = osx"
